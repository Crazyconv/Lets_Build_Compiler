// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
*/

Accessibility = PUBLIC
		      |
		      ;

// Zhoushen weishenme zhemeshuai

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
        |
        ;
   
Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
             |
             ;
   
Declaration = FunctionDeclaration
            | FieldDeclaration
            | TypeDeclaration
            ;
   
FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;

FieldDeclaration = Accessibility TypeName ID SEMICOLON;

TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

TypeName = PrimitiveType 
         | ArrayType
         | ID
         ;
    
PrimitiveType = VOID
              | BOOLEAN
              | INT
              ;
        
ArrayType = PrimitiveType LBRACKET RBRACKET ArrayTypeTail
          | ID LBRACKET RBRACKET ArrayTypeTail
          ;
          
ArrayTypeTail = LBRACKET RBRACKET ArrayTypeTail
              | 
              ;
              
ParameterList = Parameter
              | Parameter COMMA ParameterList
              |
              ;
              
Parameter = TypeName ID;

StatementList = Statement StatementList
              |
              ;

Statement = TypeName ID SEMICOLON
          | LCURLY StatementList RCURLY
          | IF LPAREN Expression RPAREN Statement ElseOpt
          | WHILE LPAREN Expression RPAREN Statement
          | BREAK SEMICOLON
          | RETURN SEMICOLON
          | RETURN Expression SEMICOLON
          | Expression SEMICOLON
          ;
         
ElseOpt = ELSE Statement
         |
         ;

Expression = Assignment
           | RHExpression
           ;
           
Assignment = LHExpression EQL Expression;

LHExpression = ID
            | ArrayAccess
            ;
            
ArrayAccess = ID LBRACKET Expression RBRACKET ArrayAccessTail;


ArrayAccessTail = LBRACKET Expression RBRACKET ArrayAccessTail
                |
                ;

RHExpression = ArithmeticExpression
             | ArithmeticExpression ComparisonOperator ArithmeticExpression
             ;
             
ComparisonOperator = EQEQ
                   | NEQ
                   | LT
                   | LEQ
                   | GT
                   | GEQ
                   ;
                   
ArithmeticExpression = ArithmeticExpression AddOperator Term
                     | Term
                     ;
                     
AddOperator = PLUS
            | MINUS;
            
Term = Term MulOperator Factor
     | Factor
     ;
     
MulOperator = TIMES
            | DIV
            | MOD
            ;
            
Factor = MINUS Factor
       | PrimaryExpression
       ;
       
PrimaryExpression = LHExpression
                  | ID LPAREN ExpressionList RPAREN
                  | LBRACKET NonEmpExpressionList RBRACKET
                  | STRING_LITERAL
                  | INT_LITERAL
                  | TRUE
                  | FALSE
                  | LPAREN Expression RPAREN
                  ;
                
ExpressionList = Expression
               | Expression COMMA ExpressionList
               |
               ;
               
NonEmpExpressionList = Expression
                     | Expression COMMA NonEmpExpressionList
                     ;





/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;